// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
    binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Team {
    id            Int      @id @default(autoincrement())
    name          String
    gamesHomeTeam Game[]   @relation(name: "HomeTeam")
    gamesAwayTeam Game[]   @relation(name: "AwayTeam")
    Player        Player[]

    @@index([id])
}

model Game {
    id              Int           @id @default(autoincrement())
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    createdBy       String?
    homeTeam        Team          @relation(name: "HomeTeam", fields: [homeTeamId], references: [id])
    homeTeamId      Int
    awayTeam        Team          @relation(name: "AwayTeam", fields: [awayTeamId], references: [id])
    awayTeamId      Int
    homeTeamScore   Int           @default(0)
    awayTeamScore   Int           @default(0)
    points          Point[]
    status          GameStatus    @default(READY)
    startingOffense String?       @default("")
    PointPlayer     PointPlayer[]

    @@index([homeTeamId])
    @@index([awayTeamId])
    @@index([createdBy])
}

enum GameStatus {
    READY
    STARTED
    COMPLETED
}

model Player {
    id          Int           @id @default(autoincrement())
    name        String
    team        Team          @relation(fields: [teamId], references: [id])
    teamId      Int
    pointPlayer PointPlayer[]
}

model Point {
    id          Int           @id @default(autoincrement())
    game        Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId      Int
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    createdBy   String?
    status      PointStatus   @default(READY)
    scoringTeam String?
    players     PointPlayer[]
}

model PointPlayer {
    id        Int    @id @default(autoincrement())
    player    Player @relation(fields: [playerId], references: [id])
    playerId  Int
    game      Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId    Int
    assists   Int?   @default(0)
    goals     Int?   @default(0)
    blocks    Int?   @default(0)
    turnovers Int?   @default(0)
    point     Point? @relation(fields: [pointId], references: [id])
    pointId   Int?
}

enum PointStatus {
    READY
    STARTED
    COMPLETED
}
